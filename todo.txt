- fundamental questions
    - raison d'etre
    - web only or web abstracted (is "ReactNative" possible)
    - framework vs. library => library
        - no router 
        - no http
        - forms (to be considered)
    - supported languages (TS / ES6 / ES5)
        - ES2015+?
    - required build / toolchain 
        - drop-a-compiler script would be totally great...
        - editor(s) support
    - scope
        - animations?
        - dependency injection?
        - server-side rendering?
        - relation to web components (custom elements, shadow dom)
        - dynamic compilation (AngularJS $compile)
        - i18n?
        - web-worker?
    - testing story
        - unit
        - e2e
    - name / logo / domain
- compiler / syntax
    - render(...) function signature
        - standalone function vs. render in a component
        - this.foo vs. ctx.foo vs. foo in a component's rendere function 
    - template markers in regular JS functions: 
        import {x} from 'x';
        ...
        x`hi!`    
    - expression vs. statement: {=expression} vs. {% statement %}  
    - bindings: 
        - text nodes: Hello, {=name}!
        - attributes: attr="{=expression1} {=expression2}"
        - properties: [prop]="{=expression}" / [prop]="{=expression1} {=expression2}"
        - class: [class.foo]="{=boolExpression}"
        - directive inputs:
            - default: <div [@tooltip]="Great tip!">
            - named: <div [@tooltip.title]="Great tip!" [@tooltip.delay]="500">
    - one-time bindings: Hello, {::=name}!
    - interpolations: {=expression1} {=expression2}
    - comments: {* *}
    - component definition:
        import {MyComponent} from './my-component';

        x`<MyComponent></MyComponent>`; // this would have to be based on the naming convention...
        x`<@MyComponent></@MyComponent>`;
        x`<div:@MyComponent></div:@MyComponent>`; // to specify a host???
    - event handlers
        - (click)="handler($event)"
        - (click)="handler(args)"
        - (click.$e)="handler($e, args)"  ?
    - component / directive referencing
        - component: <MyComponent></MyComponent>
        - directive: <div @tooltip="Great tip!">
    - local references:
        - <dif #foo>
        - <div #foo[]>
        - <MyComponent #el #cmpt="@MyComponent"></MyComponent>
        - <div @tooltip="Great tip!" #t="@tooltip">
- basic template syntax
    + static elements
    + interpolation in text nodes
    + properties
    + attributes    
    - one-time binding
    - 2-way data binding
    - loops and trackBy
    + class toggle
    + one vs. multiple text nodes => one, use `before ${toEmptyStr(exp1)} after`
    - event handlers
        +  event access => $event
        - local vars / refs access (listeners are registered in creation mode!)
    - referencing nodes in a given view
    - sanitization    
- components
    - content projection
        + containers at the root of a slot (can't immediatelly insert)
        + multiple slotables with the same name        
        + conditional slots        
        + conditional slottables (one slottable in a container)
        + conditional slottables (multiple slottables in a container)
        + conditional slottables (slottables in different containers)
        + conditional slottables (slottables in nested containers)
        - re-projection
            + default slotables
            - named slotables
            - named and default slotables at the root of other slotables
            - named and default slotables at the root of a container
        - mix of named slotables and default nodes in a container
        - dynamic slottables (loop + track-by)
        - properties binding on slottables
        - imperative (ex.: wrapping in a loop)
        - nested slottables (ex.: tabs)
        - "lazy" slottables (ex. delayed tabs / panels) 
        - perf: when are content nodes (VNode and DOM) destroyed?
        - corner cases:
            - multiple usages of <x-slot> (and imperative equivalent)
            - multiple usages of <x-slot name=""> (and imperative equivalent)
    - host by default? host-less components?
    - dynamic creation
        - basic
        - with inputs / outputs
        - with content (named, multiple named, default)
- directives
    - host 
        - bindings
        - other directives
    - listeners / outputs
    - lifecycle and lifecycle hooks
- change detection
    - manual refresh
        - from root
        - from a given component
    - automatic / implicit refresh in an event handlers?
    - OnPush / should component update equivalent
- dynamic insertion of UI fragments (ex. tooltip)
- dynamic compilation (give a string, get a function, a la AngularJS $compile)
- extract "renderer" interface so I can swap one for unit tests and sniff DOM manipulation