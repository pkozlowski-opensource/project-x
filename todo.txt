- fundamental questions
    - raison d'etre
        - easy to learn and use 
            - JS statements in templates reducing number of concepts / syntax constructs
        - performant
            - small size
            - extreme tree shaking 
        - hackable (< 1000 LOC of TS code, architecture and thinking docs)
        - independent / community driven
    - web only or web abstracted (is "ReactNative" possible?)
    - framework vs. library => library
        - no http => use fetch
        - forms / validation (to be considered)
        - no router (community project, at least initially)
    - supported languages (TS / ES6 / ES5)
        - ES2015+?
    - required build / toolchain 
        - drop-a-compiler script would be totally great...
        - editor(s) support
    - scope
        - animations?
        - dependency injection?
        - server-side rendering?
        - relation to web components (custom elements, shadow dom)
        - dynamic compilation (AngularJS $compile)
        - i18n?
        - web-worker?
    - testing story
        - unit
        - e2e
    - name / logo / domain
- compiler / syntax
    - render(...) function signature
        - single vs. multiple arguments for context
        - standalone function vs. render in a component
        - this.foo vs. ctx.foo vs. foo in a component's rendere function 
    - template markers in regular JS functions: 
        import {x} from 'x';
        ...
        x`hi!`    
    - expression vs. statement: {=expression} vs. {% statement %}  
    - bindings: 
        - text nodes: Hello, {=name}!
        - attributes: attr="{=expression1} {=expression2}"
        - properties: [prop]="{=expression}" / [prop]="{=expression1} {=expression2}"
        - class: [class.foo]="{=boolExpression}"
        - directive inputs:
            - default: <div [@tooltip]="Great tip!">
            - named: <div [@tooltip.title]="Great tip!" [@tooltip.delay]="500">
    - one-time bindings: Hello, {::=name}!
    - interpolations: {=expression1} {=expression2}
    - comments: {* *}
    - component definition:
        import {MyComponent} from './my-component';

        x`<@MyComponent></@MyComponent>`;
        x`<tr @x-component="MyComponent"></tr>`; 
    - event handlers
        - (click)="handler($event)"
        - (click)="handler(args)"
        - (click.$e)="handler($e, args)"  ?
    - component / directive referencing
        - component: <MyComponent></MyComponent>
        - directive: <div @tooltip="Great tip!">
    - local references:
        - <dif #foo>
        - <div #foo[]>
        - <MyComponent #el #cmpt="@MyComponent"></MyComponent>
        - <div @tooltip="Great tip!" #t="@tooltip">
- runtime impl
    - basic template syntax
        + static elements
        - namespaced elements / attributes (SVG)
        + bindings
            + attributes 
            + properties
            + class toggle
            + interpolation in text nodes
            + one vs. multiple text nodes => one, use `before ${toEmptyStr(exp1)} after`
        - one-time binding
            - attributes
            - properties
            - class toggle
            - inputs
            - text nodes (interpolation)
            - mixed interpolation (ex.: <span>{::=exp1})|{=exp2}</span>)
        - 2-way data binding
            + manual / the "hard way"
            - sugar
        - loops and trackBy
        + event handlers
            + event access => $event
            + local vars / refs access (listeners are registered in creation mode!)
        + reference single element in a given view
        - reference multiple elements in a given view
        - sanitization    
    - components
        + host by default? host-less components?
        - content projection
            + containers at the root of a slot (can't immediatelly insert)
            + multiple slotables with the same name        
            + conditional slots        
            + conditional slottables (one slottable in a container)
            + conditional slottables (multiple slottables in a container)
            + conditional slottables (slottables in different containers)
            + conditional slottables (slottables in nested containers)
            + re-projection
                + default slotables
                + named slotables
                + named and default slotables at the root of other slotables
                + named and default slotables at the root of a container
            - mix of named slotables and default nodes in a container
            - dynamic slottables (loop + track-by)
            - properties binding on slottables
            - imperative (ex.: wrapping in a loop)
            - nested slottables (ex.: tabs)
            - "lazy" slottables (ex. delayed tabs / panels) 
            - perf: when are content nodes (VNode and DOM) destroyed?
            - corner cases:
                - multiple usages of <x-slot> (and imperative equivalent)
                - multiple usages of <x-slot name=""> (and imperative equivalent)
        - dynamic creation (create content given component type)
            - basic
            - with inputs / outputs
            - with content (named, multiple named, default)
        - refs
            - single
            - multiple
    - directives
        - host 
            - bindings
            - listeners
            - other directives
        + listeners / outputs
        - lifecycle and lifecycle hooks
        - refs
            + single
            - multiple
    - change detection
        - manual refresh
            - from root
            - from a given component
        - automatic / implicit refresh in an event handlers?
        - OnPush / should component update equivalent
    - dynamic insertion of UI fragments (ex. tooltip)
    - dynamic compilation (give a string, get a function, a la AngularJS $compile)
    - extract "renderer" interface so I can swap one for unit tests and sniff DOM manipulation
- perf
    - setup benchmarks
        - green table
        - large table / tree + benchpress
    - open questions / points of worry
        - closures for handlers (don't see how to remove)
        - closures for views (could be removed)
- chore / project organization
    - split into multiple files (src and tests)
